<script src=pixicon.js></script>
<style>
* {font: 14px Segoe UI,Trebuchet MS,Tahoma,sans-serif}
body {margin:0;height:100%;background:#36393E;background-image:radial-gradient(#B59D7E77,#36393E);background-size:4px;text-align:center;}
div#p {width: 617px;margin-right:3px}
div#p2 {width: 334px}
div#u, div#uu {
    margin:0px;
    box-shadow: 2px 2px 20px #232427;
    border-radius: 4px;
    padding: 8px;
    display: inline-flex;
    background: #5B616A;margin-top:32px
}
div#u2{
    margin:0px;
    box-shadow: 2px 2px 20px #232427;
    border-radius: 0 0 4px 4px;
    padding: 16px;
    background: #FBF5F5;
    width: 640px;
    margin:auto;
}
input,button {
    text-shadow: 0.6px 0.6px 0px #FFF;
    border-radius: 2px;
    margin: 3px;
    padding: 2px;
    outline: none;
    width: 612px;
    color: #555;
    text-align: center;
    border: none;
    background: #F2EDED;
    margin-top: 4px;
    height: 32px;
    box-shadow: 1px 1px 3px #232427;
}

input {width:328px}
input:hover,button:hover {background:#D0D2D7}
button:active,input:focus{background:#C7C9CF;}
button:active{cursor:pointer;}
canvas {
    border-radius: 2px;box-shadow: 1px 1px 3px #232427;
    background: #FBF5F5;
    margin: 2px;
    padding: 3px;
    border: 1px solid #EAEAEA;
    transition: opacity .25s ease-in-out;
    widtha:24px;heighta:24px;

}
canvas:hover {
    background:#EEE;cursor:pointer;
}

canvas:active{opacity:0.5;}
hr{border:0;border-bottom:1px solid #AAA;margin:8px;padding:0;}
em{font-style:italic;}
* {transition: opacity .25s ease-in-out;}
canvas#q{padding:11px 9.5px;width:308px; height:308px;} /* multiples of 8 only! */
.info b{font:bold 32px consolas;margin-bottom:4px;}
.info {text-align:left;}
a{color:crimson}
#m0de{margin-bottom:6px;}
</style>
<div>
<div id=u>
    <div id=p><div id=o></div><button>Generate more</button></div>
    <div id=p2><canvas id=q width=308 height=308></canvas><input type=text placeholder='Type something here'></div>
</div>
</div>
<div class=info id=u2><b>pixicon</b> by <a target="_blank" href="http://github.com/bryc">@bryc</a><br>
    An experimental hashicon generator. Designed to produce highly identifable icons with as many different results as possible. It is a WIP, still looking into better pattern/color generation methods and different shapes. The code is also a bit unoptimized and longer than it could be.
    <br>
    Click <a id=m0de href=?alt>here</a> to swap pixels or triangles. Click any small icon to load it into the big one. Click the big icon to pause/start the random marquee. 
    <!--<hr>
    To give you an idea of how many <em>base patterns</em> there are: in 11x11 grid, there are (2<sup>5</sup> x 6<sup>10</sup> x 2<sup>6</sup>) in diagonal symmetry mode or (6<sup>25</sup> x 2<sup>6</sup>) in fully random mode. So combined: 123,834,728,448 + 1,819,538,433,915,500,888,064 possible base patterns. Not bad! 
    <br><br>
    This however doesn't take into account color information, layering, or alternate symmetry modes which probably increase these numbers exponentially.-->
</ul>
</div>



<script>
if(document.location.search=='?alt') {
    document.querySelector('#m0de').href = "?";
}

function hash(key, seed = 0) {
    // note: PRNG designers actually commend MurmurHash3's final mixing function and 
    // have tried testing it using traditional randomness tets: it fairs well apparently.
    function fmix32(h) { 
        h ^= h >>> 16; h = Math.imul(h, 2246822507);
        h ^= h >>> 13; h = Math.imul(h, 3266489909);
        h ^= h >>> 16;
        return h;
    }
    
    var k, p1 = 597399067, p2 = 2869860233, p3 = 951274213, p4 = 2716044179;

    var h1 = seed ^ p1,
        h2 = seed ^ p2,
        h3 = seed ^ p3,
        h4 = seed ^ p4;

    for(var i = 0, b = key.length & -16; i < b;) {
        k1 = key[i+3] << 24 | key[i+2] << 16 | key[i+1] << 8 | key[i];
        k1 = Math.imul(k1, p1); k1 = k1 << 15 | k1 >>> 17;
        h1 ^= Math.imul(k1, p2); h1 = h1 << 19 | h1 >>> 13; h1 += h2;
        h1 = Math.imul(h1, 5) + 1444728091 | 0; // |0 = prevent float
        i += 4;
        k2 = key[i+3] << 24 | key[i+2] << 16 | key[i+1] << 8 | key[i];
        k2 = Math.imul(k2, p2); k2 = k2 << 16 | k2 >>> 16;
        h2 ^= Math.imul(k2, p3); h2 = h2 << 17 | h2 >>> 15; h2 += h3;
        h2 = Math.imul(h2, 5) + 197830471 | 0;
        i += 4;
        k3 = key[i+3] << 24 | key[i+2] << 16 | key[i+1] << 8 | key[i];
        k3 = Math.imul(k3, p3); k3 = k3 << 17 | k3 >>> 15;
        h3 ^= Math.imul(k3, p4); h3 = h3 << 15 | h3 >>> 17; h3 += h4;
        h3 = Math.imul(h3, 5) + 2530024501 | 0;
        i += 4;
        k4 = key[i+3] << 24 | key[i+2] << 16 | key[i+1] << 8 | key[i];
        k4 = Math.imul(k4, p4); k4 = k4 << 18 | k4 >>> 14;
        h4 ^= Math.imul(k4, p1); h4 = h4 << 13 | h4 >>> 19; h4 += h1;
        h4 = Math.imul(h4, 5) + 850148119 | 0;
        i += 4;
    }

    k1 = 0, k2 = 0, k3 = 0, k4 = 0;
    switch (key.length & 15) {
        case 15: k4 ^= key[i+14] << 16;
        case 14: k4 ^= key[i+13] << 8;
        case 13: k4 ^= key[i+12];
                 k4 = Math.imul(k4, p4); k4 = k4 << 18 | k4 >>> 14;
                 h4 ^= Math.imul(k4, p1);
        case 12: k3 ^= key[i+11] << 24;
        case 11: k3 ^= key[i+10] << 16;
        case 10: k3 ^= key[i+9] << 8;
        case  9: k3 ^= key[i+8];
                 k3 = Math.imul(k3, p3); k3 = k3 << 17 | k3 >>> 15;
                 h3 ^= Math.imul(k3, p4);
        case  8: k2 ^= key[i+7] << 24;
        case  7: k2 ^= key[i+6] << 16;
        case  6: k2 ^= key[i+5] << 8;
        case  5: k2 ^= key[i+4];
                 k2 = Math.imul(k2, p2); k2 = k2 << 16 | k2 >>> 16;
                 h2 ^= Math.imul(k2, p3);
        case  4: k1 ^= key[i+3] << 24;
        case  3: k1 ^= key[i+2] << 16;
        case  2: k1 ^= key[i+1] << 8;
        case  1: k1 ^= key[i];
                 k1 = Math.imul(k1, p1); k1 = k1 << 15 | k1 >>> 17;
                 h1 ^= Math.imul(k1, p2);
    }

    h1 ^= key.length; h2 ^= key.length; h3 ^= key.length; h4 ^= key.length;

    h1 += h2; h1 += h3; h1 += h4;
    h2 += h1; h3 += h1; h4 += h1;

    h1 = fmix32(h1);
    h2 = fmix32(h2);
    h3 = fmix32(h3);
    h4 = fmix32(h4);

    h1 += h2; h1 += h3; h1 += h4;
    h2 += h1; h3 += h1; h4 += h1;

    return [h1 >>> 0, h2 >>> 0, h3 >>> 0, h4 >>> 0];
}


var pixi = document.location.search == '?alt' ? true : false;

function wJ(){return Math.random().toString(36).substr(2,4)}

function arst(a){return a.trim?Array.apply(0,Array(a.length)).map(function(x,i){return a[i].charCodeAt()}):String.fromCharCode.apply(0,a)}

function more() {
    
    
    for(var i=0;i<cnt;i++) {
        var str = wJ()+wJ()+wJ()+wJ()+wJ()+wJ();
        cnv[i].id = "p";
        cnv[i].title = str;
        pixicon(cnv[i],4, hash(arst(str)), pixi);

        cnv[i].onclick = function() {
            //pixicon(document.querySelector("canvas#q"),23, hash(arst(this.title)), pixi);
            qactive = false;
            document.querySelector("input").value = this.title;
            document.querySelector("input").dispatchEvent(new Event('input'));
            document.querySelector("canvas#q");
        };
    }
}

pixicon(document.querySelector("canvas#q"),28, hash(arst(Math.random().toString())),pixi);
document.querySelector("input").oninput = function() {
    pixicon(document.querySelector("canvas#q"), 28, hash(arst(this.value)), pixi);
};
document.querySelector("input").onfocus = function() {
    qactive = false;
};
document.querySelector("canvas#q").onclick = function() {
    qactive = !qactive;
};
var wat, qactive = true;

function startThing() {
    wat = setInterval(function(){
        if(qactive) {
            var str = wJ()+wJ()+wJ()+wJ()+wJ()+wJ();
            //console.log(str);
            pixicon(document.querySelector("canvas#q"), 28, hash(arst(str)),pixi);
            document.querySelector("input").value = str;
        }
    },500)
}

startThing();
for(var cnt = 66, cnv = [], i = 0; i < cnt; i++) {
    var c = document.createElement("canvas");
    cnv.push(c);
    document.querySelector("div#o").appendChild(c);
    if(i===cnt-1) more(), document.querySelector("button").onclick = more;
}
</script>